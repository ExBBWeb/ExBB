<?phpnamespace Core\Library\Extension;use Core\Library\Application\Application;use Core\Library\Extension\LanguageObject;class Language {	protected static $_instance;	protected $language;	protected $strings;	    private function __construct(){		$this->strings = new LanguageObject();    }	public function setLanguage($language) {		$this->language = $language;	}		public function loadCommon(&$object, $file) {		$path = BASE.'/languages/'.$this->language.'/'.$file.'.php';		$this->load($object, $path);	}		public function load(&$object, $path) {		if (!file_exists($path)) return false;				$lang = new LanguageObject();		include $path;				//if (isset($lang)) $strings = array_merge($strings, $lang);		$object = (object)(array_merge((array)$object, (array)$lang));	}		public function getString($string) {		return (isset($this->strings[$string])) ? $this->strings[$string] : '';	}		public function isRedefineLanguage($section, $component, $lang) {				$path = BASE.'/languages/'.$this->language.'/'.$section.'/'.$component.'/'.$lang.'.php';				return (file_exists($path)) ? $path : false;	}	    public static function getInstance() {        // проверяем актуальность экземпляра        if (null === self::$_instance) {            // создаем новый экземпляр           self::$_instance = new self();        }        // возвращаем созданный или существующий экземпляр        return self::$_instance;    }    private function __clone() {    	}}?>